package dev.gabrielolv.kotsql.validation

/**
 * Validation annotations that are applied to generated data class properties
 * based on SQL constraints and column metadata.
 */

/**
 * Indicates that a field cannot be null or empty/blank for strings
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class NotNull(val message: String = "Field cannot be null")

/**
 * Indicates that a string field cannot be blank (null, empty, or whitespace only)
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class NotBlank(val message: String = "Field cannot be blank")

/**
 * Validates string length constraints
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class Length(
    val min: Int = 0,
    val max: Int = Int.MAX_VALUE,
    val message: String = "Field length must be between {min} and {max}"
)

/**
 * Validates numeric range constraints
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class Range(
    val min: Long = Long.MIN_VALUE,
    val max: Long = Long.MAX_VALUE,
    val message: String = "Value must be between {min} and {max}"
)

/**
 * Validates decimal range constraints
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class DecimalRange(
    val min: Double = Double.MIN_VALUE,
    val max: Double = Double.MAX_VALUE,
    val message: String = "Value must be between {min} and {max}"
)

/**
 * Validates string patterns using regex
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class Pattern(
    val regex: String,
    val message: String = "Field does not match required pattern"
)

/**
 * Validates email format
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class Email(val message: String = "Field must be a valid email address")

/**
 * Validates that a field is a primary key (typically for internal use)
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class PrimaryKey(val autoGenerated: Boolean = false)

/**
 * Indicates that a field references another table (foreign key)
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class ForeignKey(
    val referencedTable: String,
    val referencedColumn: String = "id"
)

/**
 * Custom validation with a lambda expression
 */
@Target(AnnotationTarget.PROPERTY)
@Retention(AnnotationRetention.RUNTIME)
annotation class Custom(
    val validatorClass: String,
    val message: String = "Field validation failed"
) 